ython 3.7.2 (v3.7.2:9a3ffc0492, Dec 24 2018, 02:44:43) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>> import sys
>>> 
###### PART I: IMPORT TWYTHON, ADD TWITTER APP KEY & ACCESS TOKEN (TO ACCESS API) ######
>>> def get_data_user_timeline_all_pages(kid, page):
    try:        
        '''
        'count' specifies the number of tweets to try and retrieve, up to a maximum of 200
        per distinct request. The value of count is best thought of as a limit to 
        the number of tweets to return because suspended or deleted content is removed 
        after the count has been applied. We include retweets in the count, even if 
        include_rts is not supplied. It is recommended you always send include_rts=1 when 
        using this API method.

 '''        
        d = twitter.get_user_timeline(screen_name=kid, count="200", page=page, include_entities="true", include_rts="1")          
    except Exception, e:
        print "Error reading id %s, exception: %s" % (kid, e)
        return None
    print len(d) #NUMBER OF ENTRIES RETURNED
    #print "d.keys(): ", d[0].keys()
    return d
###### SET UP MONGODB DATABASE AND ACCOUNTS AND TWEETS TABLES ###### 

#MAKE CONNECTION TO MONGODB

# DEFINE YOUR MONGODB DATABASE
db = client['MLB']

accounts = db['accounts']

# CREATE AN INDEX ON THE COLLECTION TO AVOID INSERTION OF DUPLICATES
db.accounts.create_index([('Twitter_handle', pymongo.ASCENDING)], unique=True)

# SHOW INDEX ON ACCOUNTS TABLE
#list(db.accounts.index_information())

#SHOW NUMBER OF ACCOUNTS IN TABLE
#accounts.count()

# DEFINE COLLECTION (TABLE) WHERE YOU'LL INSERT THE TWEETS
tweets = db['tweets']

# CREATE UNIQUE INDEX FOR TABLE (TO AVOID DUPLICATES)
db.tweets.create_index([('id_str', pymongo.ASCENDING)], unique=True)
 5 minutes if necessary'
            rate_limit_check = twitter.get_application_rate_limit_status()['resources']['statuses']['/statuses/user_timeline']['remaining']
            print '.......and here is our ACTUAL remaining API rate_limit: ', rate_limit_check
            if rate_limit_check<5:
                print 'Fewer than 5 API calls remaining...pausing for 5 minutes'
                time.sleep(300) #PAUSE FOR 300 SECONDS
                rate_limit = twitter.get_application_rate_limit_status()['resources']['statuses']['/statuses/user_timeline']['remaining']
                print '.......here is our remaining API rate_limit after pausing for 5 minutes: ', rate_limit
                #if rate_limit_check == 450:
                #    rate_limit = 450

    #if twitter.get_application_rate_limit_status()['resources']['search']['/search/tweets']['remaining']<5:
    if rate_limit < 5:
        print 'Fewer than 5 estimated API calls remaining...pausing for 5 minutes'
        time.sleep(300) #PAUSE FOR 900 SECONDS
      
        
elapsed = timeit.default_timer() - start_time
print '# of minutes: ', elapsed/60
SyntaxError: unexpected indent
>>> or org in db.tweets.aggregate([
    {"$group":{"_id":"$screen_name", "sum":{"$sum":1}}} 
    ]):
    print org['_id'], org['sum']

